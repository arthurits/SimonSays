using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ColorButton
{

    public partial class customButton : Button //http://msdn.microsoft.com/en-us/library/5h0k2e6x(v=vs.90).aspx
    {
        #region Variable definition

        //Task taskBeep;
        private GraphicsPath path;
        //private GraphicsPath innerPath;
        private Int32 _nColor = 0;
        private Int32 _nRotation = 0;
        private bool _clicked = false;
        private Int32 _nFrequency = 165;
        private Int32 _nDuration = 400;
        //private float _fButtonWidth = 0.55f;
        //private float _fButtonRadius = 0.08f;
        //private float _fDegrees = 1.0f;
        
        //private float _fMaxRadius= 1f;
        //private float _fMinRadius = 0.5f;

        //private float _fWidthFactor = 0.65f;
        //private float _fSideFactor = 1.15f;
        //private float _fAlpha = 0.0f;
        //private float _fBeta = 0.0f;

        private Int32 _nSideLength = 0;
        private Int32 _nXOffset = 0;
        private Int32 _nYOffset = 0;
        private float _fAngleOut = 0.0f;
        private float _fAngleIn = 0.0f;
        private PointF _fPoint0;
        private PointF _fPoint1;
        private PointF _fPoint2;
        private PointF _fPoint3;
        private PointF _fPoint4;
        private PointF _fPoint5;
        private float _fWidth = 1.0f;

        #endregion Variable definition

        #region Public interface

        [Description("Numeric value representing the color"),
        Category("Custom"),
        Browsable(true)]
        public Int32 ColorValue
        {
            get { return _nColor; }
            set { _nColor = value > 3 ? 3 : (value < 0 ? 0 : value); }
        }

        [Description("State of the button"),
        Category("Custom"),
        Browsable(true)]
        public bool Clicked
        {
            get { return _clicked; }
            set
            {
                _clicked = value;
                if (value == true) DoBeep();
                Invalidate();
            }
        }

        [Description("Rotation (degrees) of the button"),
        Category("Custom"),
        Browsable(true)]
        public Int32 Rotation
        {
            get { return _nRotation; }
            set
            {
                _nRotation = value;
                Invalidate();
            }
        }

        [Description("Frequency (Hertz) of the beeping sound"),
        Category("Custom"),
        Browsable(true)]
        public Int32 Frequency
        {
            get { return _nFrequency; }
            set { _nFrequency = value; }
        }

        [Description("Duration (miliseconds) of the beeping sound"),
        Category("Custom"),
        Browsable(true)]
        public Int32 Duration
        {
            get { return _nDuration; }
            set { _nDuration = value; }
        }

        [Description("Button outer envelope radial span (degrees)"),
        Category("Custom"),
        Browsable(true)]
        public float OuterAngleSpan
        {
            get { return _fAngleOut; }
            set { _fAngleOut = value; CalculateFactors(); Invalidate(); }
        }

        [Description("Width percentage of the button"),
        Category("Custom"),
        Browsable(true)]
        public float WidthPercentage
        {
            get { return _fWidth; }
            set { _fWidth = value; CalculateFactors(); Invalidate(); }
        }

        [Description("Gets the button radius"),
        Category("Custom"),
        Browsable(true)]
        public Int32 ButtonRadius
        {
            get { return _nSideLength; }
        }

        [Description("Gets the button X offset"),
        Category("Custom"),
        Browsable(true)]
        public Int32 OffSetX
        { get { return _nXOffset; } }

        [Description("Gets the button Y offset"),
        Category("Custom"),
        Browsable(true)]
        public Int32 OffSetY
        { get { return _nYOffset; } }

        #endregion Public interface

        public customButton()
        {
            InitializeComponent();
            //CalculateFactors();
            
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            DoBeep();
            _clicked = true;
            base.OnMouseDown(e);
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            _clicked = false;
            base.OnMouseUp(e);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            if (_clicked == true) { this.Clicked = false; }
            base.OnMouseLeave(e);
        }

        protected override void OnResize(EventArgs e)
        {
            //Invalidate();
            _nSideLength = (Int32)Math.Round(Math.Min(this.Size.Height, this.Size.Width) / Math.Sqrt(2.0));
            //Int32 nXOffset = (Int32)Math.Floor(  (this.Size.Width - nSideLength )   / 2.0);
            //Int32 nYOffset = (Int32)Math.Floor(  (this.Size.Height  - nSideLength)   / 2.0);
            _nXOffset = (Int32)Math.Round(this.Size.Width / 2 - _nSideLength * (1 - 0.5 * Math.Cos(Math.PI / 4.0)));
            _nYOffset = (Int32)Math.Round(this.Size.Height / 2 - _nSideLength * (1 - 0.5 * Math.Cos(Math.PI / 4.0)));

            _nXOffset = (Int32)Math.Floor(0.5 * (this.Size.Width - _nSideLength));
            _nYOffset = (Int32)Math.Floor(0.5 * (this.Size.Height - _nSideLength));
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            g.SmoothingMode = SmoothingMode.AntiAlias;

            // Create Rectangle To Limit brush area.
            //Rectangle rect = new Rectangle(0, 0, 150, 150);

            path = new GraphicsPath();
            GraphicsPath pathPunto = new GraphicsPath();

            pathPunto.AddRectangle(new RectangleF(_nXOffset + _nSideLength * (_fPoint0.X ),
                _nYOffset + _nSideLength * (_fPoint0.Y ),
                _nSideLength * (1 - 1 * _fPoint0.Y),
                _nSideLength * (1 - 1 * _fPoint0.Y)));
            //g.DrawPath(new Pen(Color.Red, 10), pathPunto);
            

            path.AddArc(_nXOffset + _nSideLength * (_fPoint0.X),
                _nYOffset + _nSideLength * (_fPoint0.Y),
                2 * _nSideLength * (1 - 1 * _fPoint0.X),
                2 * _nSideLength * (1 - 1 * _fPoint0.Y),
                180 + _fAngleOut,
                90 - 2 * _fAngleOut);
            path.AddLine(_nXOffset + _nSideLength * (_fPoint0.X - _fPoint2.X),
                _nYOffset + _nSideLength * (_fPoint0.Y + _fPoint2.Y),
                _nXOffset + _nSideLength * (0 + _fPoint3.X),
                _nYOffset + _nSideLength * (_fPoint0.Y + _fPoint2.Y + _fPoint3.Y));
            path.AddArc(_nXOffset + _nSideLength * (_fPoint0.X + _fPoint1.X + _fPoint4.X),
                _nYOffset + _nSideLength * (_fPoint0.Y + _fPoint2.Y + _fPoint3.Y),
                1 * _nSideLength * (1 - _fPoint5.X),
                1 * _nSideLength * (1 - _fPoint5.X),
                270 - _fAngleIn,
                -(90 - 2 * _fAngleIn));
            path.AddLine(_nXOffset + _nSideLength * (_fPoint0.X + _fPoint1.X + _fPoint4.X),
                _nYOffset + _nSideLength * (0 + _fPoint4.Y),
                _nXOffset + _nSideLength * (_fPoint0.X + _fPoint1.X),
                _nYOffset + _nSideLength * (0 + _fPoint1.Y));
            
            Matrix matrix = new Matrix();
            //matrix.RotateAt(_nRotation, new PointF(_nXOffset + _nSideLength / 2, _nYOffset + _nSideLength / 2));
            matrix.RotateAt(_nRotation, new PointF(this.Size.Width / 2, this.Size.Height / 2));
            path.Transform(matrix);

            LinearGradientBrush linearBrush =
                new LinearGradientBrush(new RectangleF(_nXOffset, _nYOffset, _nSideLength * (1 - (float)Math.Sin(_fAngleOut * Math.PI / 180)), _nSideLength * (1 - (float)Math.Sin(_fAngleOut * Math.PI / 180))),
                this.BackColor,
                this.ForeColor,
                45 + _nRotation);

            g.FillPath(linearBrush, path);
            //this.Region = new Region(path);
            //g.DrawPath(new Pen(Color.Red,10), path);
            if (_clicked == true)
            {
                PathGradientBrush pthGrBrush = new PathGradientBrush(path);
                
                pthGrBrush.SurroundColors = new Color[] { this.ForeColor };
                pthGrBrush.CenterColor = Color.FromArgb(220, 255, 255, 255);
                //pthGrBrush.FocusScales = new PointF(0.4f, 0.4f);
                pthGrBrush.CenterPoint = new PointF(_nXOffset + _nSideLength * _fPoint4.X, _nYOffset + _nSideLength * _fPoint3.Y);

                g.FillPath(pthGrBrush, path);
                //g.FillRectangle(pthGrBrush, new Rectangle(0, 0, nSideLength, nSideLength));
                pthGrBrush.Dispose();

            }            


            linearBrush.Dispose();
            g.FillPath(new SolidBrush(Color.FromArgb(120, 255, 0, 0)), pathPunto);
        }

        private void CalculateFactors()
        {

            Double dAngle = _fAngleOut * Math.PI / 180;

            if (_fWidth==1)
            {
                _fPoint0.X = 0.0f;
            }
            else
            {
                _fPoint0.X = (1 - _fWidth) / 2;
                //_fPoint0.X = 0.0f;
            }
            //_fPoint0.X = 0.0f;
            _fPoint0.Y = _fPoint0.X;

            _fPoint1.X = 1 - (float)Math.Cos(dAngle);
            _fPoint1.Y = 1 - (float)Math.Sin(dAngle);

            _fPoint2.X = _fPoint1.Y;
            _fPoint2.Y = _fPoint1.X;

            _fPoint3.X = _fPoint2.X;
            //_fPoint3.Y = 1 - (float)Math.Cos(_fAngleIn * Math.PI / 180);
            //_fPoint3.Y = 1 + (_fWidth - 1) * (float)Math.Cos(dAngle) - _fWidth * (float)Math.Sin(dAngle);
            _fPoint3.Y = _fWidth;

            _fPoint4.X = _fPoint3.Y;
            _fPoint4.Y = _fPoint1.Y;

            if (_fAngleOut == 0.0f)
            {
                _fAngleIn = 0.0f;

                if (_fWidth == 1)
                    _fPoint5.X = 0.99999f;
                else
                    _fPoint5.X = _fPoint3.Y;
            }
            else
            {
                _fAngleIn = (float)Math.Atan(Math.Sin(dAngle) / ((1 - _fWidth) * Math.Cos(dAngle) + _fWidth * Math.Sin(dAngle)));
                //_fAngleIn = (float)Math.Asin(Math.Sin(dAngle) + (1 - _fWidth / 2) / (_fWidth / 2));
                _fPoint5.X = 1 - (float)(Math.Sin(dAngle) / Math.Sin(_fAngleIn));
            }

            //_fPoint5.X = _fPoint3.Y - (float)Math.Sin(_fAngleIn);
            //_fPoint5.Y = _fPoint4.X - (float)Math.Sin(_fAngleIn);            

            _fPoint5.Y = _fPoint5.X;
            _fAngleIn = _fAngleIn * 180 / (float)Math.PI;


        }
        private void DoBeep()
        {
            /*
            E-note (blue, lower right); 329.6 Hz
            C♯-note (yellow, lower left); 277.2 Hz
            A-note (red, upper right); 220 Hz
            E-note (green, upper left, an octave lower than blue); 164.8 Hz
             */
            //http://social.msdn.microsoft.com/Forums/vstudio/en-US/18fe83f0-5658-4bcf-bafc-2e02e187eb80/beep-beep?forum=csharpgeneral          
            Task.Run(() => Console.Beep(_nFrequency, _nDuration));
        }
    }
}
